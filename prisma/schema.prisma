generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  todos         Todo[]
  tags          Tag[]     @relation("UserTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Todo {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?
  status      String
  priority    String
  document    Json?     @db.Json
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  todoTags    TodoTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  type     TagType
  userId   String?   @db.ObjectId
  user     User?     @relation("UserTags", fields: [userId], references: [id], onDelete: Cascade)
  todoTags TodoTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TodoTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  todoId String @db.ObjectId
  tagId  String @db.ObjectId
  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TagType {
  SYSTEM
  USER
}
